/* Multiplos controle de um Estoque Automatizado e Inteligente
  10º Semestre de Engenharia de Automação e Controle - Centro Universitario de Jaguariuna - Campus II - Jaguariùna - SP
  Trabalho de Conclusão de Curso - Estante Autonoma
  autor: Kaio Silva
  Versão 01 - 26/10/2018 */



#include <Ultrasonic.h>
#include <SimpleModbusSlave.h>

//SensorX=Sensor 1
#define pino_trigger1 8//Sensor X
#define pino_echo1 7//Sensor X
float cmMsecX;
float lastcmMsecX;
double setPointx = 29.5;
double  KPx = 10, KIx = 5, KDx = 0;
double  Px = 0, Ix = 0, Dx = 0;
double PIDx = 0;
double FowardPWMx = 0;
double ReversePWMx = 0;
double errorX = 0;


//MotorX= Motor 1
#define Rpwmx 3//Motor X Direta
#define Lpwmx 9//Motor X Esquerda

//SensorY=Sensor 2
#define pino_trigger2 13//Sensor Y
#define pino_echo2 12//Sensor Y
float cmMsecY;
float lastcmMsecY;
double setPointy = 50;
double  KPy = 5, KIy = 3, KDy = 3 ;
double  Py = 0, Iy = 0, Dy = 0;
double PIDy = 0;
double FowardPWMy = 0;
double ReversePWMy = 0;
double errorY = 0;


//MotorY= Motor 2
#define Rpwmy 10// Motor Y Direita
#define Lpwmy 11//Motor Y Esquerda

//Imã
int Ima = 2;


//Trava Eixo X
int Trava = 4;

long lastProcess;
Ultrasonic ultrasonic1(pino_trigger1, pino_echo1);
Ultrasonic ultrasonic2(pino_trigger2, pino_echo2);

#define      nPy     50        //número de pontos da média móvel 
long moving_average();       //Função para filtro de média móvel

int       original,          //recebe o valor de AN0
          filtrado;          //recebe o valor original filtrado
int       numbers[nPy];        //vetor com os valores para média móvel

enum 
{     
NumSetPointx,
NumSetPointy,
NumKPx,
NumKIx,
NumKDx,
NumKPy,
NumKIy,
NumKDy,
NumPIDx,
NumPIDy,
NumPx,
NumIx,
NumDx,
NumPy,
NumIy,
NumDy,
NumerrorX,
NumerrorY,
NumFowardPWMx,
NumReversePWMx,
NumFowardPWMy,
NumReversePWMy,
HOLDING_REGS_SIZE                                                                                                                           
};
 
unsigned int holdingRegs[HOLDING_REGS_SIZE]; 


void setup() {
 {
        
  modbus_configure(&Serial, 9600, SERIAL_8N1, 1, 2, HOLDING_REGS_SIZE, holdingRegs);
 
  modbus_update_comms(9600, SERIAL_8N1, 1);
  
}
  pinMode(Rpwmx, OUTPUT);
  pinMode(Lpwmx, OUTPUT);
  pinMode(Rpwmy, OUTPUT);
  pinMode(Lpwmy, OUTPUT);
  pinMode(Ima, OUTPUT);
  pinMode(Trava, OUTPUT);
  digitalWrite(Ima, LOW);
  digitalWrite(Trava, LOW);
  lastProcess = millis();


}


void loop() {
{
 
  modbus_update();
  
analogWrite(setPointx, holdingRegs[NumSetPointx]);
analogWrite(setPointy, holdingRegs[NumSetPointy]);
analogWrite(KPx, holdingRegs[NumKPx]);
analogWrite(KIx, holdingRegs[NumKIx]);
analogWrite(KDx, holdingRegs[NumKDx]);
analogWrite(KPy, holdingRegs[NumKPy]);
analogWrite(KIy, holdingRegs[NumKIy]);
analogWrite(KDy, holdingRegs[NumKDy]);
holdingRegs[NumPIDx] = analogRead(PIDx); 
holdingRegs[NumPIDy] = analogRead(PIDy); 
holdingRegs[NumPx] = analogRead(Px); 
holdingRegs[NumIx] = analogRead(Ix); 
holdingRegs[NumDx] = analogRead(Dx);
holdingRegs[NumPy] = analogRead(Py); 
holdingRegs[NumIy] = analogRead(Iy); 
holdingRegs[NumDy] = analogRead(Dy); 
holdingRegs[NumerrorX] = analogRead(errorX); 
holdingRegs[NumerrorY] = analogRead(errorY); 
holdingRegs[NumFowardPWMx] = analogRead(FowardPWMx);
holdingRegs[NumReversePWMx] = analogRead(ReversePWMx); 
holdingRegs[NumFowardPWMy] = analogRead(NumFowardPWMy); 
holdingRegs[NumReversePWMy] = analogRead(ReversePWMy);
                                                         
  
  
}


  //  Calculo e leitura das distancias X e Y dos sensores ultrassonicos

  //sensor X
  long microsecX = ultrasonic1.timing();
  cmMsecX = ultrasonic1.convert(microsecX, Ultrasonic::CM);



  //Sensor Y
  long microsecY = ultrasonic2.timing();
  cmMsecY = ultrasonic2.convert(microsecY, Ultrasonic::CM);

  original = cmMsecY;

   filtrado = moving_average();



  //implementação PID
  errorX = setPointx - cmMsecX;
  errorY = setPointy - mediay;

  float deltatime = (millis() - lastProcess) / 1000.0;
  lastProcess = millis();

  Px = errorX * KPx;
  Py = errorY * KPy;

  Ix += (errorX * KIx) * deltatime;
  Iy += (errorY * KIy) * deltatime;

  Dx = (cmMsecX - lastcmMsecX) * KDx / deltatime;
  Dy = (mediay - lastcmMsecY) * KDy / deltatime;
  lastcmMsecX = cmMsecX;
  lastcmMsecY = mediay;

  PIDx =  Px + Ix + Dx;
  PIDy = Py + Iy + Dy;

  //Limitação em X
  if (Px >= 255)
  {
    Px = 255;
  }
  if (Px <= -255)
  {
    Px = -255;
  }

  if (Ix >= 255)
  {
    Ix = 255;
  }
  if (Ix <= -255)
  {
    Ix = -255;
  }
  if (Dx >= 255)
  {
    Dx = 255;
  }
  if (Dx <= -255)
  {
    Dx = -255;
  }
  if (PIDx >= 255)
  {
    PIDx = 255;
  }
  if (PIDx <= -255)
  {
    PIDx = -255;
  }

  //Limitação em Y
  if (Py >= 255)
  {
    Py = 255;
  }
  if (Py <= -255)
  {
    Py = -255;
  }

  if (Iy >= 255)
  {
    Iy = 255;
  }
  if (Iy <= -255)
  {
    Iy = -255;
  }
  if (Dy > 255)
  {
    Dy = 255;
  }
  if (Dy <= -255)
  {
    Dy = -255;
  }
  if (PIDy >= 255)
  {
    PIDy = 255;
  }
  if (PIDy <= -255)
  {
    PIDy = -255;
  }

  PIDx = abs(PIDx);
  PIDy = abs(PIDy);

  PIDx = map(PIDx,  4,  255, 0, 255);
  PIDy = map(PIDy,  0,  255, 0, 100);

  //Saída em X
  if (errorX < 0)
  {
    // reverse rotation
    ReversePWMx = PIDx;
    FowardPWMx = 0;
    analogWrite(Lpwmx, FowardPWMx);
    analogWrite(Rpwmx, ReversePWMx);
  } else {
    // forward rotation
    FowardPWMx = PIDx;
    ReversePWMx = 0;
    analogWrite(Lpwmx, FowardPWMx);
    analogWrite(Rpwmx, ReversePWMx);
  }

  //Saída em Y
  if (errorY < 0)
  {
    // reverse rotation

    ReversePWMy = (PIDy);
    FowardPWMy = 0;
    analogWrite(Lpwmy, FowardPWMy);
    analogWrite(Rpwmy, ReversePWMy);
  } else {
    // forward rotation

    FowardPWMy = (PIDy);
    ReversePWMy = 0;
    analogWrite(Lpwmy, FowardPWMy);
    analogWrite(Rpwmy, ReversePWMy);
  }
  if (errorX < 1)
  {
    digitalWrite(Ima, LOW);
  }
  if (errorX <= 0.6 && errorX > -0.6)
  {
    PIDx = 0;
    ReversePWMy = 0;
    FowardPWMy = 0;
  }
  if (errorX > -0.6)
  {
    PIDx = 0;
    ReversePWMy = 0;
    FowardPWMy = 0;
  }


  //Exibe informacoes no serial monitor
  Serial.print(" DistanciaX em cm: ");
  Serial.print(cmMsecX);
  Serial.print(" Erro em X  ");
  Serial.print(errorX);

  Serial.print(" ReverseX: ");
  Serial.print(ReversePWMx);
  Serial.print(" FowardX: ");
  Serial.print(FowardPWMx);


  /*
    Serial.print(" DistanciaY em cm: ");
    Serial.print(mediay);
    Serial.print(" Erro em Y  ");
    Serial.print(errorY);

    Serial.print(" ReverseY: ");
    Serial.print(ReversePWMy);
    Serial.print(" FowardY: ");
    Serial.println(FowardPWMy);
    //    Serial.print(" ima: ");
    // Serial.print(Ima);
    //   Serial.print(" Trava: ");
    //Serial.println(Trava);
  */
  Serial.print(" Py: ");
  Serial.print(Px);
  Serial.print(" Iy: ");
  Serial.print(Ix);
  Serial.print(" Dy: ");
  Serial.print(Dx);
  Serial.print(original);
   Serial.print(" ");
   Serial.println(filtrado);
delay(10);


}
// --- Desenvolvimento da Função Media Movel--
long moving_average()
{

   //desloca os elementos do vetor de média móvel
   for(int i= nPy-1; i>0; i--) numbers[i] = numbers[i-1];

   numbers[0] = original; //posição inicial do vetor recebe a leitura original

   long acc = 0;          //acumulador para somar os pontos da média móvel

   for(int i=0; i<nPy; i++) acc += numbers[i]; //faz a somatória do número de pontos


   return acc/nPy;  //retorna a média móvel

 
} //end moving_average
