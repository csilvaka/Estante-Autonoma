/* Multiplos controle de um Estoque Automatizado e Inteligente
 10º Semestre de Engenharia de Automação e Controle - Centro Universitario de Jaguariuna - Campus II - Jaguariùna - SP
 Trabalho de Conclusão de Curso - Estante Autonoma
 autor: Kaio Silva
 Versão 01 - 26/10/2018 */

 
  
  #include <Ultrasonic.h>
  
  //SensorX=Sensor 1
  #define pino_trigger1 8//Sensor X
  #define pino_echo1 7//Sensor X
   float cmMsecX;
   float lastcmMsecX;
   byte setPointx = 30;
   Ultrasonic ultrasonic1(pino_trigger1, pino_echo1);
   
  //SensorY=Sensor 2
  #define pino_trigger2 13//Sensor Y
  #define pino_echo2 12//Sensor Y
  float cmMsecY;
  float lastcmMsecY;
  byte setPointy = 69;
  Ultrasonic ultrasonic2(pino_trigger2, pino_echo2);
  
  //PIDx
   double  KPx = 0, KIx = 0, KDx = 0;
   double  Px = 1, Ix = 1, Dx = 0;
   double PIDx = 0;
   byte FowardPWMx = 0;
   byte ReversePWMx = 0;
   byte errorX = 0;
  
  
  //PIDy
   double  KPy = 2, KIy = 0, KDy = 0;
   double  Py = 1, Iy = 0, Dy = 0;
   double PIDy = 0;
   byte FowardPWMy = 0;
   byte ReversePWMy = 0;
   byte errorY = 0;

//MotorX= Motor 1
  #define Rpwmx 3//Motor X Direta
  #define Lpwmx 9//Motor X Esquerda
  
 //MotorY= Motor 2
  #define Rpwmy 10// Motor Y Direita
  #define Lpwmy 11//Motor Y Esquerda
  
  //Periféricos
  
    //Imã
      int Ima=2;
     
      
   //Trava Eixo X
     int Trava=4;
     
  
   //KIx
   long lastProcessX;
   
    //KIy
   long lastProcessY;
   
   //Funções
   void AjustaX();
   void AjustaY();
   void Retira();
   void Devolve();
    
void setup()
{
  Serial.begin(9600);
  pinMode(Rpwmx, OUTPUT);//Motor 1- X
  pinMode(Lpwmx, OUTPUT);//Motor 1- X
  pinMode(Rpwmy, OUTPUT);//Motor 2- Y
  pinMode(Lpwmy, OUTPUT);//Motor 2- Y
  pinMode(Ima, OUTPUT);// Imã
  pinMode(Trava, OUTPUT);// Trava de Bandeja X
  
}


void loop()
{

AjustaY();
AjustaX();
Retira();
Devolve();

}

void AjustaY()
{

  //Sensor Y
   long microsecY = ultrasonic2.timing();
   cmMsecY = ultrasonic2.convert(microsecY, Ultrasonic::CM);
   cmMsecY=map(cmMsecY,  5.65,  42.66, 0, 100);
   
   //PIDy
    errorY = setPointy - cmMsecY;
     float deltatimeY = (millis() - lastProcessY) / 1000.0; 
    lastProcessY = millis();
    
    //P
     Py= errorY * KPy;
   
   //I
    //Iy += (errorY * KIy) * deltatime;
    
   //D
  //Dy = (cmMsecY-lastcmMsecY) *KDy / deltatimeY;
  
   lastcmMsecY = cmMsecY;
   
   PIDy = Py + Iy + Dy;
 
   //Limitação em Y
  if(PIDy>255)
  {
  PIDy=255;
  }
  if (PIDy<=0)
  {
    PIDy=0;
  }
  
  PIDy=abs(PIDy);
  PIDy= map(PIDy,  0,  255, 30, 255);
  
  //Saída em Y
   if (errorY <0)
    {
      // reverse rotation
      ReversePWMy=(PIDx);
      FowardPWMy=0;
      analogWrite(Lpwmy, FowardPWMy);
      analogWrite(Rpwmy, ReversePWMy);
    } else {
      // forward rotation
      FowardPWMy=(PIDy);
      ReversePWMy=0;
      analogWrite(Lpwmy, FowardPWMy);
      analogWrite(Rpwmy, ReversePWMy);
    }
}

 
void ajustaX();


//sensor X
  long microsecX = ultrasonic1.timing();
  cmMsecX = ultrasonic1.convert(microsecX, Ultrasonic::CM);
  cmMsecX=map(cmMsecX,  4,  38, 0, 100);
 


 
  //implementação PID
  errorX = setPointx - cmMsecX;
 
  
  float deltatimeX = (millis() - lastProcessX) / 1000.0; 
  lastProcessX = millis();
  
  Px= errorX * KPx;
 
  
 // Ix += (errorX * KIx) * deltatime;

  
 // Dx = (cmMsecX-lastcmMsecX ) *KDx / deltatimeX;
 
 // lastcmMsecX = cmMsecX;

  
  PIDx =  Px + Ix + Dx;
 
    
//Limitação em X
if(PIDx>255)
{
PIDx=255;
}
if (PIDx<=0)
{
  PIDx=0;
}

PIDx=abs(PIDx);



PIDx= map(PIDx,  30,  255, 0, 255);
 digitalWrite(Trava, HIGH);

//Saída em X
 if (errorX <0)
  {
 
    // reverse rotation
    ReversePWMx=PIDx;
    FowardPWMx=0;
    analogWrite(Lpwmx, FowardPWMx);
    analogWrite(Rpwmx, ReversePWMx);
  } else {
    // forward rotation
    digitalWrite(Trava, HIGH);
    FowardPWMx=PIDx;
    ReversePWMx=0;
    analogWrite(Lpwmx, FowardPWMx);
    analogWrite(Rpwmx, ReversePWMx);
  }
  
 digitalWrite(Trava, LOW);
 

  //Exibe informacoes no serial monitor
  Serial.print(" DistanciaX em cm: ");
  Serial.print(cmMsecX); 
  Serial.print(" Erro em X  ");
  Serial.print(errorX);

  Serial.print(" ReverseX: ");
  Serial.print(ReversePWMx);
   Serial.print(" FowardX: ");
  Serial.print(FowardPWMx);



  Serial.print(" DistanciaY em cm: ");
  Serial.print(cmMsecY);
 Serial.print(" Erro em Y  ");
 Serial.print(errorY);
  
  Serial.print(" ReverseY: ");
  Serial.print(ReversePWMy);
   Serial.print(" FowardY: ");
  Serial.print(FowardPWMy);
     Serial.print(" Ima: ");
  Serial.print(Ima);
     Serial.print(" Trava: ");
Serial.println(Trava);
}

 void Devolve();
 

}
