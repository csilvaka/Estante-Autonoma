

#include <SimpleModbusSlave.h>


enum 
{     
                                                        
                                           
NumSetPointx,
NumSetPointy,
[NumKPx,
[NumKIx,
NumKDx,
NumKPy,
NumKIy,
NumKDy,
NUmPIDx,
NUmPIDy,
NUmPx,
NUmIx,
NUmDx,
NUmPy,
NUmIy,
NUmD,
NumErrorX,
NumErrorY,
NumFowardPWMx,
NumReversePWMx,
NumFowardPWMy,
NumReversePWMy,
HOLDING_REGS_SIZE                                                                                                                           
};
 
unsigned int holdingRegs[HOLDING_REGS_SIZE]; 


void setup()
{
        
  modbus_configure(&Serial, 9600, SERIAL_8N1, 1, 2, HOLDING_REGS_SIZE, holdingRegs);
 
  modbus_update_comms(9600, SERIAL_8N1, 1);
  
}

void loop()
{
                                                                                  
                                                                            
                                            
  
  modbus_update();
  
analoglWrite(SetPointx, holdingRegs[NumSetPointx]);
analoglWrite(SetPointy, holdingRegs[NumSetPointy]);
analoglWrite(KPx, holdingRegs[NumKPx]);
analoglWrite(KIx, holdingRegs[NumKIx]);
analoglWrite(KDx, holdingRegs[NumKDx]);
analoglWrite(KPy, holdingRegs[NumKPy]);
analoglWrite(KIy, holdingRegs[NumKIy]);
analoglWrite(KDy, holdingRegs[NumKDy]);
holdingRegs[NUmPIDx] = analogRead(PIDx); 
holdingRegs[NUmPIDy] = analogRead(PIDy); 
holdingRegs[NUmPx] = analogRead(Px); 
holdingRegs[NUmIx] = analogRead(Ix); 
holdingRegs[NUmDx] = analogRead(Dx);
holdingRegs[NUmPy] = analogRead(Py); 
holdingRegs[NUmIy] = analogRead(Iy); 
holdingRegs[NUmDy] = analogRead(Dy); 
holdingRegs[NumErrorX] = analogRead(ErrorX); 
holdingRegs[NumErrorY] = analogRead(ErrorY); 
holdingRegs[NumFowardPWMx] = analogRead(FowardPWMx);
holdingRegs[NumReversePWMx] = analogRead(ReversePWMx); 
holdingRegs[NumFowardPWMy] = analogRead(NumFowardPWMy); 
holdingRegs[NumReversePWMy] = analogRead(ReversePWMy);
                                                         
  
  
}
